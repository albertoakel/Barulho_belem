import streamlit as st
import pandas as pd
import datetime
from geopy.geocoders import Nominatim
import folium
from streamlit_folium import st_folium

st.set_page_config(page_title="Mapa do Barulho - Bel√©m", layout="wide")
st.title("üìç Registro de Barulho em Bel√©m")

# Inicializa DataFrame
if "registros" not in st.session_state:
    st.session_state["registros"] = pd.DataFrame(columns=[
        "Data", "Endere√ßo", "Latitude", "Longitude", "Origem", "Frequ√™ncia",
        "Intensidade", "Hor√°rio", "Dura√ß√£o_horas", "dB", "Observa√ß√µes"
    ])

geolocator = Nominatim(user_agent="barulho_belem")

# Coordenadas iniciais de Bel√©m
latitude, longitude = -1.455833, -48.503889
endereco = ""

# =========================
# Entrada manual de endere√ßo
# =========================
st.subheader("üìå Informe o local do barulho")

if "endereco_input" not in st.session_state:
    st.session_state["endereco_input"] = ""

endereco_input = st.text_input(
    "Digite o endere√ßo (Rua, n¬∫, bairro, CEP) - opcional:",
    value=st.session_state["endereco_input"]
)

if endereco_input and endereco_input != st.session_state["endereco_input"]:
    location = geolocator.geocode(endereco_input)
    if location:
        latitude, longitude = location.latitude, location.longitude
        endereco = location.address
        st.session_state["endereco_input"] = endereco
        st.success(f"Endere√ßo localizado: {endereco}")
    else:
        st.warning("Endere√ßo n√£o encontrado. Clique no mapa para selecionar.")

# =========================
# Mapa interativo
# =========================
st.subheader("üó∫Ô∏è Ou clique no mapa para marcar a localiza√ß√£o")

m = folium.Map(location=[latitude, longitude], zoom_start=13)
folium.Marker([latitude, longitude], tooltip="Local selecionado").add_to(m)
map_data = st_folium(m, height=600, width=1200)

if map_data and map_data["last_clicked"]:
    latitude = map_data["last_clicked"]["lat"]
    longitude = map_data["last_clicked"]["lng"]
    try:
        location = geolocator.reverse((latitude, longitude), language="pt")
        if location:
            endereco = location.address
            st.session_state["endereco_input"] = endereco
            st.info(f"Endere√ßo aproximado (mapa): {endereco}")
        else:
            endereco = "N√£o encontrado"
    except:
        endereco = "Erro na geocodifica√ß√£o"

# =========================
# Formul√°rio de registro
# =========================
with st.form("registro_barulho"):
    origem = st.selectbox("Origem do barulho", [
        "Som de carro (propaganda)",
        "Autofalantes em resid√™ncias",
        "Festa em bares",
        "Pared√£o, Trio e Aparelhagens",
        "Tr√¢nsito intenso (√¥nibus, motos, buzinas)",
        "Obras/Constru√ß√£o",
        "Eventos p√∫blicos (igreja, prociss√£o, shows)",
        "Outros"
    ])
    frequencia = st.selectbox("Frequ√™ncia", [
        "Todos os dias", "Todos os finais de semana", "Ocasionalmente"
    ])
    intensidade = st.radio("N√≠vel de inc√¥modo", ["Baixo", "M√©dio", "Alto"])
    horario = st.multiselect("Per√≠odo em que mais ocorre", ["Manh√£", "Tarde", "Noite", "Madrugada"])
    duracao = st.slider("Dura√ß√£o m√©dia (horas)", 0.0, 12.0, 1.0, step=0.5)
    decibeis = st.number_input("Medi√ß√£o aproximada (dB) - opcional", min_value=0, max_value=150, step=1)
    observacoes = st.text_area("Observa√ß√µes adicionais")

    enviado = st.form_submit_button("Salvar registro")

# =========================
# Salvar registro
# =========================
if enviado:
    if st.session_state["endereco_input"]:
        novo_registro = {
            "Data": datetime.datetime.now(),
            "Endere√ßo": st.session_state["endereco_input"],
            "Latitude": latitude,
            "Longitude": longitude,
            "Origem": origem,
            "Frequ√™ncia": frequencia,
            "Intensidade": intensidade,
            "Hor√°rio": ", ".join(horario),
            "Dura√ß√£o_horas": duracao,
            "dB": decibeis if decibeis > 0 else None,
            "Observa√ß√µes": observacoes
        }
        st.session_state["registros"] = pd.concat(
            [st.session_state["registros"], pd.DataFrame([novo_registro])],
            ignore_index=True
        )

        # ======== Salvar CSV com timestamp ========
        path = '/home/akel/PycharmProjects/Barulho_belem/data/raw/'
        timestamp = datetime.datetime.now().strftime("%d.%m.%Y_%H_%M_%S")
        filename = f"reg_{timestamp}.csv"
        st.session_state["registros"].to_csv(path+filename, index=False)
        st.success(f"‚úÖ Registro salvo com sucesso! ")
        #st.success(f"‚úÖ Registro salvo com sucesso! Arquivo: `{filename}`")

    else:
        st.error("‚ö†Ô∏è Nenhum endere√ßo selecionado. Informe ou clique no mapa.")

# =========================
# Mostrar registros
# =========================
st.subheader("üìä Registros realizados")
st.dataframe(st.session_state["registros"])
